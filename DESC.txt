The goal of this task is to implemented a networked, multithreaded
sorted set (described below) that handles positive integers. Your
program should start up and begin accepting commands that are sent
over port 7999 via the binary protocol described below. Each <...>
represents a four byte signed integer in network byte order* sent down
the wire, and [...] represents a four byte signed integer that your
program sends back up the wire. All set ids, keys, and scores will be
positive.

<ADD> <set> <key> <score> adds member <key> to <set>, with score
<score>. If <set> doesn't exist, it's created. If <key> is already in
<set>, its score is updated. Should run in time O(log(size(<set>))).
<REM> <set> <key> removes <key> from <set> if <set> exists and <key>
is in <set>. Should run in time O(log(size(<set>))).
<SIZE> <set> [size] returns the size of set <set>, or 0 if set <set>
doesn't exist. Should run in time O(1).

<GET> <set> <key> [score] returns the score of key <key> in <set>, and
-1 if either the set does not exist or does not contain <key>. Should
run in time O(1).
<GETRANGE> <set1> ... <setM> <-1> <lower> <upper> [key1] [key1_score]
... [keyN] [keyN_score] [-1] returns all elements in sets <set1> ...
<setM> with scores in the range [<lower>, <upper>]. This should be
implemented as efficiently as you can, but we're more concerned about
the asymptotic complexity of the approach; don't worry about diving
into assembly.

ADD = 1, REM = 2, SIZE = 3, GET = 4, GETRANGE = 5. The program should
be multithreaded (up to 10 parallel connections) and support any
combination of parallel reads / writes.

In addition to the code you submit, please include a brief explanation
of the design choices you made- which data structures you used, how
you handle concurrency, and what tradeoffs you made vs other
approaches.

Here is an example interaction:

<SIZE> <set1> [0]

<ADD> <set1> <k1> <1>
<GET> <set1> <k1> [1]
<SIZE> <set1> [1]

<ADD> <set1> <k1> <2>
<GET> <set1> <k1> [2]

<ADD> <set1> <k2> <3>
<GETRANGE> <set1> <-1> <3> <3> [k2] [3] [-1]

<ADD> <set2> <k3> <1>
<GETRANGE> <set1> <set2> <-1> <0> <INT_MAX> [k3] [1] [k1] [2] [k2] [3] [-1]

<REM> <set1> <k2>
<GETRANGE> <set1> <set2> <-1> <0> <INT_MAX> [k3] [1] [k1] [2] [-1]

set1-2 and k1-3 are aliases for different positive integers.

* take a look at htonl and ntohl
